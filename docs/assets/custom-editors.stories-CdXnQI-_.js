import{R as e}from"./iframe-Iifyoimw.js";import{D as u}from"./data-editor-all-CYJZRdiL.js";import{B as p,D as E,P as C,u as f,d as g}from"./utils-DCrqnqmL.js";import{S as h}from"./story-utils-DST3U7UA.js";import{G as v}from"./image-window-loader-BDCXALa9.js";import"./throttle-BVHd-xO2.js";import"./flatten-Dm8ntmsO.js";import"./scrolling-data-grid-CX8tx08F.js";import"./marked.esm-B4q_PBrm.js";import"./index-D_kXk1yT.js";import"./index.esm-pZ0ZBnMd.js";import"./index-qADYP8W1.js";const _={title:"Glide-Data-Grid/DataEditor Demos",decorators:[t=>e.createElement(h,null,e.createElement(p,{title:"Custom Editors",description:e.createElement(E,null,"The ",e.createElement(C,null,"provideEditor")," callback allows you to provide a custom editor for a cell. In this example, cells in the first column get a custom editor.")},e.createElement(t,null)))]},m=t=>{const{value:o,onFinishedEditing:r}=t,[a,i]=e.useState(o.data);return e.createElement("div",{style:{width:"100%",height:"100%"}},"Type something:",e.createElement("input",{style:{width:"100%",height:"100%",boxSizing:"border-box",border:"2px solid #666",background:"#333",color:"white",padding:"0 8px"},value:a,onChange:c=>i(c.target.value),onBlur:()=>r({...o,data:a})}))};m.displayName="CustomEditor";const x=t=>{var o;if(((o=t.location)==null?void 0:o[0])===0)return r=>e.createElement(m,{...r})},l=()=>{const{cols:t,getCellContent:o,setCellValue:r}=f(10,!1);return e.createElement(u,{...g,getCellContent:o,columns:t,rows:20,onCellEdited:(a,i)=>{i.kind===v.Text&&r(a,i)},provideEditor:x})};l.displayName="CustomEditors";var n,s,d;l.parameters={...l.parameters,docs:{...(n=l.parameters)==null?void 0:n.docs,source:{originalSource:`() => {
  const {
    cols,
    getCellContent,
    setCellValue
  } = useMockDataGenerator(10, false);
  return <DataEditor {...defaultProps} getCellContent={getCellContent} columns={cols} rows={20} onCellEdited={(cell, newValue) => {
    if (newValue.kind !== GridCellKind.Text) return;
    setCellValue(cell, newValue);
  }} provideEditor={provideEditor as ProvideEditorCallback<any>} />;
}`,...(d=(s=l.parameters)==null?void 0:s.docs)==null?void 0:d.source}}};const K=["CustomEditors"];export{l as CustomEditors,K as __namedExportsOrder,_ as default};
